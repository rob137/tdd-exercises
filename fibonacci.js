//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

const sumEvenValues = (arr) => arr.reduce((acc, cur) => {
  return cur % 2 === 0 ? acc + cur : acc + 0
}, 0);
const evenSum = sumEvenValues([1, 2, 3, 4, 5]);
if (!typeof evenSum === 'number') throw "Should return a number";
if (evenSum !== 6) throw "Should return sum of even values in arr";
if (sumEvenValues([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) !== 30) throw "Should return sum of even numbers in arr";



const getFibArr = () => {
  const max = 4000000;
  const fibArr = [];
  let a = 0;
  let b = 1;
  let c = 0;
  while (c < max) {
    c = a + b;
    a = b;
    b = c;
    if (c < max) fibArr.push(c);
  }
  return fibArr;
};
const inc = (arr, vals) => {
  failed = false;
  vals.forEach((v) => {
    if (!arr.includes(v)) {
      failed = true; 
    }
  });
  return failed;
};
const fibArr = getFibArr();
if (!Array.isArray(fibArr)) throw "Should output an array";
if (fibArr.some(n => !Boolean(n))) throw "Output should not contain falsy values";
if (fibArr.some(n => typeof n !== 'number')) throw "Output should only contain numbers";
if (new Set(fibArr).size !== fibArr.length) throw "Output should not contain repeated values";
if (!fibArr.includes(1)) throw "Output should include 1";
if (inc(fibArr, [1, 2, 3, 5, 8])) throw "Output should include 1, 2, 3, 5, 8";
if (fibArr[fibArr.length-1] > 4000000) throw "Output should not include a value greater than 4m";



console.log(sumEvenValues(getFibArr()));
